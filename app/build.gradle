apply plugin: 'com.android.application'

Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def NDKBUILD = properties.getProperty('NDKBUILD')

android {
    compileSdkVersion 15
    buildToolsVersion "21.1.1"

    defaultConfig {
        applicationId "com.example.crashlog"
        minSdkVersion 8
        targetSdkVersion 17

        ndk {
            moduleName "crashlog"
        }
    }

    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = project.plugins.findPlugin('com.android.application').getNdkFolder()
        commandLine "$ndkDir/$NDKBUILD", 
                '-C', file('src/main/jni').absolutePath,
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = project.plugins.findPlugin('com.android.application').getNdkFolder()
        commandLine "$ndkDir/$NDKBUILD",
                '-C', file('src/main/jni').absolutePath,
                'clean'
    }

    task ndkLibsToJar(type: Zip, dependsOn: 'buildNative', description: 'Create a JAR of the native libs') {
        destinationDir new File(buildDir, 'libs')
        baseName 'crashlog'
        extension 'jar'
        from(new File(buildDir, 'libs')) { include '**/*.so' }
        into 'lib/'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
        //compileTask -> compileTask.dependsOn ndkLibsToJar
    }

    buildTypes {
        release {
            minifyEnabled false
                       proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:18.0.0'
    //compile files('libs/crashlog.jar')
}
